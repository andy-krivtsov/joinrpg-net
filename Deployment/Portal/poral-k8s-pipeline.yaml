
trigger:
  batch: true
  branches:
    include:
      - 'containers/main'
      
variables:
  HELM_EXPERIMENTAL_OCI: 1

  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')] 

  ${{ if eq(variables.isMaster, true) }}:
    imageSuffix: '' 

  ${{ if ne(variables.isMaster, true) }}:
    imageSuffix: '-dev' 

  rgName: 'joinrpg-k8s'
  dockerfilePath: 'src/JoinRpg.Portal/Dockerfile'

  azureSubscription: 'JoinRPG-subscription-connection'
  registryServiceConnection: 'JoinRPG-ACR-connection'
  imageRepository: 'joinrpg.portal$(imageSuffix)'
  containerRegistry: 'joinrpg.azurecr.io'   
  verTag: '1.0.$(Build.BuildId)'
  imageFullName: '$(containerRegistry)/$(imageRepository):$(verTag)'

  keyVaultName: "joinrpg-k8s-kv"

  secretsName: "joinrpg-secrets"

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: '5.x'

    - task: HelmInstaller@1
      displayName: Install Helm
      inputs: 
        helmVersionToInstall: latest

    - task: gitversion/execute@0
      displayName: Determine Version
      inputs:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'

    - pwsh: |
        $tag = "$(GitVersion.FullSemVer)" -replace '\+','-'
        Write-Host "##vso[task.setvariable variable=safeImageTag;]$tag"
      displayName: "Create safe image tag"
      condition: contains(variables['GitVersion.FullSemVer'], '+')

    - task: Docker@2
      displayName: "Prod: build and push an image"
      condition: not(contains(variables['GitVersion.FullSemVer'], '+'))
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(registryServiceConnection)
        buildContext: .
        tags: |
          latest
          $(GitVersion.Major)
          $(GitVersion.Major).$(GitVersion.Minor)
          $(GitVersion.FullSemVer)

    - task: Docker@2
      displayName: "Stage: build and push an image"
      condition: contains(variables['GitVersion.FullSemVer'], '+')
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(registryServiceConnection)
        buildContext: .
        tags: |
          $(safeImageTag)

    - bash: |
        sed -i 's/^version: 1\.0\.0/version: $(GitVersion.FullSemVer)/g' ./charts/joinrpg-portal/Chart.yaml
        sed -i 's/tag: "1\.0\.0"/tag: "$(GitVersion.FullSemVer)"/g' ./charts/joinrpg-portal/values.yaml

        helm registry login $(containerRegistry) --username $(acrLoginName) --password $(acrLoginPassword)
        helm chart save ./charts/joinrpg-portal $(containerRegistry)/charts/joinrpg-portal:$(safeImageTag)
        helm chart push $(containerRegistry)/charts/joinrpg-portal:$(safeImageTag)
      displayName: "Publish Helm chart (Portal)"

    - publish: $(System.DefaultWorkingDirectory)/Deployment
      artifact: DeployScripts
      
- stage: Deploy_Dev_Stage
  variables:
    namespaceName: "dev"
  displayName: Deploy Dev/Stage
  dependsOn: Build
  jobs:
  - deployment: 'Deploy_Dev'
    displayName: Deploy app to the 'Dev' namespace'
    condition: eq(variables.isMaster, true)
    environment: Join-k8s-dev
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:          
          steps:
          - task: AzurePowerShell@4
            inputs:
              azureSubscription: $(azureSubscription)
              azurePowerShellVersion: LatestVersion
              ScriptType: FilePath
              ScriptPath: $(Pipeline.Workspace)/DeployScripts/Portal/Get-JoinSecrets.ps1
              scriptArguments:
                -VaultName '$(keyVaultName)' `
                -Prefix 'dev-' `
                -Namespace '$(namespaceName)' `
                -SecretName '$(secretsName) ' `
                -Path "$(Pipeline.Workspace)/DeployScripts/Portal/resources-dev/join-secrets.yaml"

          - task: KubernetesManifest@0
            displayName: "Delete old secrets"
            continueOnError: true
            inputs:
              action: delete
              arguments: secret $(secretsName) 
              kubernetesServiceConnection: JoinRPG-k8s-dev-connection
              namespace: $(namespaceName)

          - task: KubernetesManifest@0
            displayName: Deploy
            inputs:
              kubernetesServiceConnection: JoinRPG-k8s-dev-connection
              containers: |
                $(imageFullName)
              namespace: $(namespaceName)
              manifests: "$(Pipeline.Workspace)/DeployScripts/Portal/resources-dev/*.yaml"

