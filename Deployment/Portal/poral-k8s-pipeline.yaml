
trigger:
  batch: true
  branches:
    include:
      - 'containers/main'
      
variables:
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')] 

  ${{ if eq(variables.isMaster, true) }}:
    imageSuffix: '' 

  ${{ if ne(variables.isMaster, true) }}:
    imageSuffix: '-dev' 

  azureSubscription: 'JoinRPG-subscription-connection'
  registryServiceConnection: 'JoinRPG-ACR-connection'
  imageRepository: 'joinrpg.portal$(imageSuffix)'
  containerRegistry: 'joinrpg.azurecr.io'  
  dockerfilePath: 'src/JoinRpg.Portal/Dockerfile'
  rgName: 'joinrpg-k8s'
  verTag: '1.0.$(Build.BuildId)'
  imageFullName: '$(containerRegistry)/$(imageRepository):$(verTag)'

  keyVaultName: "joinrpg-k8s-kv"

  secretsName: "joinrpg-secrets"

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - publish: $(System.DefaultWorkingDirectory)/Deployment
      artifact: DeployScripts
      
- stage: Deploy_Dev_Stage
  variables:
    namespaceName: "dev"
  displayName: Deploy Dev/Stage
  dependsOn: Build
  jobs:
  - deployment: 'Deploy_Dev'
    displayName: Deploy app to the 'Dev' namespace'
    condition: ne(variables.isMaster, true)
    environment: Join-k8s-dev
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:          
          steps:
          - task: AzurePowerShell@4
            inputs:
              azureSubscription: $(azureSubscription)
              azurePowerShellVersion: LatestVersion
              ScriptType: FilePath
              ScriptPath: $(Pipeline.Workspace)/DeployScripts/Portal/Get-JoinSecrets.ps1
              scriptArguments:
                -VaultName '$(keyVaultName)' `
                -Prefix 'dev-' `
                -Namespace '$(namespaceName)' `
                -SecretName '$(secretsName) ' `
                -Path "$(Pipeline.Workspace)/DeployScripts/Portal/resources-dev/join-secrets.yaml"

          - task: KubernetesManifest@0
            displayName: "Delete old secrets"
            continueOnError: true
            inputs:
              action: delete
              arguments: secret $(secretsName) 
              kubernetesServiceConnection: JoinRPG-k8s-dev-connection
              namespace: $(namespaceName)

          - task: KubernetesManifest@0
            displayName: Deploy
            inputs:
              kubernetesServiceConnection: JoinRPG-k8s-dev-connection
              namespace: $(namespaceName)
              manifests: "$(Pipeline.Workspace)/DeployScripts/Portal/resources-dev/*.yaml"

